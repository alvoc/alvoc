name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  commit-message-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Base Setup
        uses: ./.github/workflows/base-python.yml
        with:
          environment: dev

      - name: Check commit messages
        run: poetry run cz check --branch ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

  tests:
    runs-on: ubuntu-latest
    needs: commit-message-check

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Base Setup
        uses: ./.github/workflows/base-python.yml
        with:
          environment: dev

      - name: Run tests
        run: poetry run pytest

  bump-version:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - id: cz
        name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master

      - name: Print Version
        run: echo "Bumped to version ${{ steps.cz.outputs.version }}"


  # release-to-pypi:
  #   runs-on: ubuntu-latest
  #   needs: bump-version
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #     - name: Base Setup
  #       uses: ./.github/workflows/base-python.yml
  #       with:
  #         environment: prod

  #     - name: Build package
  #       run: poetry build

  #     - name: Publish to PyPi
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: poetry publish

  # build-binaries:
  #   runs-on: ${{ matrix.os }}
  #   needs: bump-version
  #   strategy:
  #     matrix:
  #       os: [macos-latest, ubuntu-latest, windows-latest]

  #   steps:
  #     - name: Base Setup
  #       uses: ./.github/workflows/base-python-setup.yml@v1
  #       with:
  #         environment: prod

  #     - name: Build binary
  #       run: pyinstaller --name {{PROJECT_NAME}} --onefile {{PROJECT_NAME}}/main.py 

  #     - name: Archive binary
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: binary-${{ matrix.os }}
  #         path: dist/

  #     - name: Publish release
  #       if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: dist/*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}